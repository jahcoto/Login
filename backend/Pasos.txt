#Pasos para crear el Backend
1. Generar el archivo package.json con el comando npm init
2. Instalar express con el comando npm i express
3. Creamos el archivo index.js, el cual va a tener la configuración del servidor
4. Importar express en el index.js con el comando const express = require("express");
4.1 Para trabajar con el import, en el package.json, en la parte principal agregamos "type":"module", y reemplazamos el comando anterior por el siguiente: import express from "express";
5. Creamos la constante app y le asignamos el valor de la función express (const express = require("express");)
6. Con la constante app, llamamos el metodo liste, le mandamos dos parametros, el primero es el número de puerto, el segundo una funcióde callback donde mandamos a imprimir en consola que el servidor se esta ejecutando en dicho puerto.
7. Para ejecutar el servidor, vamos al package.json, en la parte de scripts y generamos los entradas: "dev": "node index.js","start":"node index.js",
8. En la consola, ejecutamos alguno de los dos scripts con el comando npm run dev o npm start
9. Para que el servidor sincronice solo cada vez que digitamos una linea nueva de código, instalamos nodemon en modo desarrollo con el siguiente comando npm i -D nodemon, para ejecutar el nodemon, modificamos el script dev de la siguiente manera: "nodemon index.js"

#Pasos para conectar a MONGODB
1. Instalamos MONGOOSE con el comando npm i MONGOOSE
2. Crear un directorio de configuración y adentro crear el archivo db.js
3. importamos la librería MONGOOSE
4. Creamos la función conectarDB:
    const conectarDB = async () => {
    try {
        const connection = await mongoose.connect(
                process.env.MONGO_URI,
                {
                    useNewURLParser: true,
                    useUnifiedTopology: true
                }
            );
        const url = `${connection.connection.host}:${connection.connection.port}`;
        console.log(`MongoDB conectado: ${url}`);
    } catch (error) {
        console.log(`Error: ${error.message}`);
        process.exit(1);        
    }
5. Importamos el archivo de configuración db.js en el index.js
6. En el index.js llamamos la función conectarDB
7. Instalamos la librería dotenv con el comando npm i dotenv, la cual nos permite crear variables de entorno para ocultar la conexion de la Backend
8. En el index.js importamos la extension dotenv
9. Llamamos la función dotenv.config() y en la raiz del proyecto creamos el archivo .env
10. En el archivo .env creamos la variable MONGO_URI y le cargamos el string de conexion
11. En el archivo db.js, cargamos la variable MONGO_URI en lugar de la cadena de conexion

#Modelo de Usuarios
1. Crear un nuevo directorio en la raiz llamado Models
2. Crear un nuevo archivo js llamado User.js dentro de Models
3. Dentro de User.js importamos MONGOOSE
4.Declaramos el schema de Usuario (schema es la estructura de la tabla en la BD):
    const schemaUser = mongoose.Schema({
        name: {
            type: String,
            required: true,
            trim: true
        },
        password: {
            type: String,
            required: true,
            trim: true
        },
        email: {
            type: String,
            required: true,
            trim: true,
            unique: true
        },
        token: {
            type: String
        }
    }, 
        {
            timestamps: true
        }
    );
5. Declaramos la constante User y le asignamos el model de mongoose (const User = mongoose.model("User", userSchema);)
6. Hacemos un export default del User (export default Usuario;)

#Routing Usuarios
1. Crear un nuevo directorio en la raiz llamado routes
2. Crear un nuevo archivo js llamado userRoutes.js dentro de routes
3. importamos express
4. Declaramos la constante userRouter y le asginamos la funcion express.Router()
5. Declaramos el metodo get en el userRouter:
    //metodo get
    userRouter.get("/", (req, res) => {
        res.json({
            "msg": "Desde API/USUARIOS"
        })
    });
6. Exportamos el router con export default userRouter;
7. En el index importamos el userRouter (import userRouter from "./routes/userRouter.js";)
8. Declaramos el llamado get del routing en el index.js (app.get('/api/users', userRouter);)
9. Declaramos el metodo Post en el userRouter:
    //metodo post
    userRouter.post("/", (req, res) => {
        res.send({
            "msg": "Desde POST/API/USUARIOS"
        })
    });
10. Declaramos el llamado get del routing en el index.js (app.get('/api/users', userRouter);)

#Controlador Usuarios
1. Crear un nuevo directorio en la raiz llamado controllers
2. Crear un nuevo archivo js llamado userController.js dentro de controllers
3. Creamos una funcion para obtener los Usuarios: 
    const getUsers = (req, res) => {
        res.json({
            "msg": "Desde API/USUARIOS"
        })
    };
4. Generamos un export para exportar la funcion que acabamos de crear, aqui se exportan todas las funciones que tengamos en el controller (export { getUsers };) 
5. En el archivo userRouter.js importamos el userController, en el metodo get cambiamos todo el segundo parametro por la funcion que acabamos de crear del controller (userRouter.get("/", getUsers);)

 


